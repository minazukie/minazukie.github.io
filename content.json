{"meta":{"title":"World of Windmills","subtitle":"Minazuki","description":"Minazuki's Website","author":"Du Jiangfan","url":"http://maho.me"},"pages":[{"title":"关于我","date":"2017-11-23T07:27:31.000Z","updated":"2019-03-08T08:06:15.832Z","comments":true,"path":"about/index.html","permalink":"http://maho.me/about/index.html","excerpt":"","text":"注：评论采用Disqus，在正常显示之前请先搭好梯子(●’◡’●) 12345678let minazukie = &#123; name: 'Jiangfan Du', languages: [ 'Python', 'JavaScript' ], position: 'Hangzhou, Zhejiang Province, China'&#125;"}],"posts":[{"title":"解决Sublime Text 3 中文编码问题","slug":"解决Sublime-Text-3-中文编码问题","date":"2018-02-11T06:17:05.000Z","updated":"2018-02-11T06:34:20.000Z","comments":true,"path":"2018/02/11/解决Sublime-Text-3-中文编码问题/","link":"","permalink":"http://maho.me/2018/02/11/解决Sublime-Text-3-中文编码问题/","excerpt":"现象在Sublime Text 3中执行Python 3脚本时, 如果需要输出中文, 会经常出现下面的问题: 1UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode character &apos;\\u4e2d&apos; in position 0: ordinal not in range(128)","text":"现象在Sublime Text 3中执行Python 3脚本时, 如果需要输出中文, 会经常出现下面的问题: 1UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode character &apos;\\u4e2d&apos; in position 0: ordinal not in range(128) 解决方法对此问题的解决方法总共分两部分. 第一步, 在自定义的Python3编译系统中加入一项属性–”env”: {“LANG”: “en_US.UTF-8”}, 下面是我的配置, 123456&#123; \"cmd\": [\"/usr/local/bin/python3.6\", \"-u\", \"$file\"], \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\", \"selector\": \"source.python\", \"env\": &#123;\"LANG\": \"en_US.UTF-8\"&#125;&#125; 第二步, 在环境变量中添加LANG=en_US.UTF-8. 编辑/Users/mac(你的用户名)/.bash_profile文件(具体的文件取决于你使用的terminal, 我使用的是mac原生bash). 1export LANG=en_US.UTF-8 再次执行你的文件, 是不是就可以正常显示中文啦~","categories":[{"name":"总结","slug":"总结","permalink":"http://maho.me/categories/总结/"}],"tags":[{"name":"sublime text 3","slug":"sublime-text-3","permalink":"http://maho.me/tags/sublime-text-3/"}]},{"title":"箭头函数与this","slug":"箭头函数与this","date":"2017-09-08T01:12:58.000Z","updated":"2017-11-23T11:12:20.000Z","comments":true,"path":"2017/09/08/箭头函数与this/","link":"","permalink":"http://maho.me/2017/09/08/箭头函数与this/","excerpt":"PRE箭头函数使用起来很便利，但要在箭头函数中使用this关键字的时候却要小心，它与function定义的函数有所不同。","text":"PRE箭头函数使用起来很便利，但要在箭头函数中使用this关键字的时候却要小心，它与function定义的函数有所不同。 箭头函数没有独立的上下文 与通过function定义的函数不同的是，箭头函数并没有独立的上下文。下面的对比可以说明这个问题。 123456789101112131415161718&#123; let obj1 = &#123; a: 'aaa', b: function() &#123; console.log(this.a); &#125; &#125; obj1.b();&#125;&#123; let obj2 = &#123; a: 'aa', b: () =&gt; &#123; console.log(this.a); &#125; &#125; obj2.b();&#125; 简单思考一下，结果如下： 12aaaundefined obj1中的b函数通过function定义，obj2中的b函数通过箭头函数定义。由于function定义的函数具有独立的上下文，且b函数是在obj1对象中定义的，因此它的函数内部的this指代的是它所处的obj对象。而在obj2中，b函数是通过箭头函数定义，而箭头函数并没有独立的上下文，于是它会向外寻找最近的function定义的函数的上下文。若找到，那么箭头函数里的this就指代那个定义了function的对象；若没找到，那么这个this将指代全局对象。在这里，该箭头函数并没有向外找到任何function定义的函数，所以这个this指代的是全局对象，而全局对象中并没有定义a，所以会返回undefined。所以说如果希望在某对象中的函数使用this来引用对象，第一种方法是可行的，直接使用第二种是不可以的。另外，根据ES6新特性，在第一种方法中，函数定义方式可以简化为以下形式： 1234567let obj1 = &#123; a: 'aaa', b() &#123; console.log(this.a); &#125;&#125;obj1.b();","categories":[{"name":"创作","slug":"创作","permalink":"http://maho.me/categories/创作/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://maho.me/tags/JavaScript/"}]},{"title":"Android终端神器————Termux初体验","slug":"termux","date":"2017-09-07T12:19:19.000Z","updated":"2017-11-23T11:12:02.000Z","comments":true,"path":"2017/09/07/termux/","link":"","permalink":"http://maho.me/2017/09/07/termux/","excerpt":"PRETermux是一款Android平台上优秀的终端应用，它可以模拟Linux的Shell环境，并可通过pkg install等命令安装诸如vim、python、node、git、openssh等程序包，如此一来，我们不仅可以在手机端coding，还可以通过openssh远程连接服务器（命令行党和Linux党是不是已经心动了呢）。","text":"PRETermux是一款Android平台上优秀的终端应用，它可以模拟Linux的Shell环境，并可通过pkg install等命令安装诸如vim、python、node、git、openssh等程序包，如此一来，我们不仅可以在手机端coding，还可以通过openssh远程连接服务器（命令行党和Linux党是不是已经心动了呢）。 INSTALL安装要求： Android(&gt;= 5.0)下载地址： 链接（酷安网）官方网站： 链接是否需要Root权限： 否 TIPS常用快捷键[Vol+] + Q 弹出“ESC CTR ALT TAB”等常用虚拟按键 [Vol-] Ctrl键 [Vol-] + W 光标向上移动 [Vol-] + S 光标向下移动 [Vol-] + A 光标向左移动 [Vol-] + D 光标向右移动 注：Vol+为音量+键，Vol-为音量-键。 常用命令安装程序包pkg install（后面加程序包名），例如：pkg install nodejss 加载外置存储空间termux-setup-storage 注：默认执行ls命令是空的，那是因为没有加载存储空间。 连接远程服务器ssh username @ ip -p portname，例如： ssh root @ 192.168.0.2 -p 22 常用技巧 两根手指向外或向内拖，可以放大或缩小显示字体。 在屏幕左侧向右滑动，可以新建、切换session，或者调出键盘。 菜单键可以呼出程序菜单（MIUI默认长按菜单键，具体根据实际按键设置而定），包含还原、销毁进程等常用操作。","categories":[{"name":"分享","slug":"分享","permalink":"http://maho.me/categories/分享/"}],"tags":[{"name":"termux","slug":"termux","permalink":"http://maho.me/tags/termux/"}]},{"title":"C++学习笔记(部分)","slug":"cpp","date":"2017-08-16T06:17:37.000Z","updated":"2017-11-23T11:11:52.000Z","comments":true,"path":"2017/08/16/cpp/","link":"","permalink":"http://maho.me/2017/08/16/cpp/","excerpt":"C++比较杂乱的注意点梳理。","text":"C++比较杂乱的注意点梳理。 C++中文乱码：Windows环境下的默认编码方式为GBK，所以修改为GBK编码方式即可。 模板类的定义和实现要同时写到h文件中，不建议分离编写。 new与不new的区别：new是在堆内存中申请空间，适合较大数据量或复杂数据类型；不new是在栈内存中申请空间，适合使用频繁或简单的数据类型。 new一定要与delete配合使用，否则会发生内存泄漏。 若new的是数组，则delete要写成delete[]。 堆内存的使用要小心，需要手动释放内存；栈内存则不需要手动释放。 -&gt;与.的区别：-&gt;通常是指针对其成员进行操作，.通常是对象对其成员进行操作。 include中&lt;&gt;与””的区别：&lt;&gt;声明的文件会在编译器的目录中寻找（例如我使用的是MinGW，头文件在MinGW文件夹下的include文件夹中），若找不到则报错；””声明的文件会首先在编译文件的当前文件夹中寻找，若找不到则会在编译器的目录中寻找，若依旧找不到则报错。 #pragma once与#ifndef的区别：作用都是为了防止重复定义，前者使用更方便，但移植性较差（许多编译器会提示报错）；后者使用略麻烦（配合#ifndef#define#endif实现），但大多数编译器可通过编译，代码移植性好。 函数functionname()与(*functionname)()是等价的。注：functionname为任意一函数名 “abc”的含义是：abc被解释为第一个元素的地址，通过操作符会返回其第一个元素的值，即a。 引用与指针的一个不同点是：引用在声明的时候必须初始化，而指针可以先声明后赋值。 使用引用参数的主要原因有两个：1）程序员能够修改调用函数中的数据对象；2）通过传递引用而不是整个数据对象，可以提高程序的运行速度。","categories":[{"name":"笔记","slug":"笔记","permalink":"http://maho.me/categories/笔记/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://maho.me/tags/cpp/"}]},{"title":"Python3的MySQL连接工具PyMySQL","slug":"Python3的MySQL连接工具PyMySQL","date":"2016-06-26T06:59:20.000Z","updated":"2017-11-26T02:54:10.000Z","comments":true,"path":"2016/06/26/Python3的MySQL连接工具PyMySQL/","link":"","permalink":"http://maho.me/2016/06/26/Python3的MySQL连接工具PyMySQL/","excerpt":"前言在Python2.x的生态圈里，有一个很好用的MySQL连接工具叫做MySQL for Python，也叫MySQLdb。它用C语言编写，因此效能很高。但遗憾的是，Python3的最新版本已不再支持MySQLdb。PyMySQL则填补了这个遗憾，它完美支持Python3，语法与MySQLdb极为相似。另外，PyMySQL完全由Python编写。","text":"前言在Python2.x的生态圈里，有一个很好用的MySQL连接工具叫做MySQL for Python，也叫MySQLdb。它用C语言编写，因此效能很高。但遗憾的是，Python3的最新版本已不再支持MySQLdb。PyMySQL则填补了这个遗憾，它完美支持Python3，语法与MySQLdb极为相似。另外，PyMySQL完全由Python编写。 PyMySQL的安装1pip install PyMySQL pmdemo.py我们写一个简单的Python程序，连接MySQL数据库并从数据库里读取数据12345678910import pymysqlconnection = pymysql.connect(host='localhost', port=3306, user='root', passwd='root', db='mypy', charset='utf8')cur = connection.cursor()sql=\"SELECT * FROM blogs_articles\"cur.execute(sql)result=cur.fetchall()for r in result: print(r)cur.close()connection.close() 详细讲解： 第一行引入pymysql， 我们开始与数据库进行连接，调用pymysql里的connect()函数，该函数里有一些一定要填写的参数，比如host里填写数据库服务器的IP地址，port填端口，user和passwd分别是填写访问数据库时要用到的用户名和密码，db填写要连接的数据库名称，charset设置字符集，一般为utf8。 接着我们设置一个游标，便于我们对数据库进行操作，调用刚刚生成的connection里的cursor()函数。 定义一个SQL语句（SQL的语法这里就不多说了）。 然后就可以执行SQL语句了，调用游标里的execute()函数，在该函数里加入刚刚定义的SQL语句。 数据库操作已经完成了，是时候把数据取出并保存下来了。我们定义一个result变量，调用游标里的fetchall()函数。 此时result里已经保存了刚刚查询出来的数据，利用print()把数据打印到屏幕上。 最后别忘了关闭刚刚打开的连接，注意关闭顺序，先关闭游标后关闭数据库连接。 让我们执行一下看看效果吧1python pmdemo.py #补充 设置游标cur=connection.cursor()这句，如果cursor()函数里不加参数，那么输出的结果会以数组的形式保存，如果想以字典的形式保存，则在cursor()括号里加上pymysql.cursors.DictCursor。 fetchall()表示获取全部记录，如果只获取一条记录则可以使用fetchone()。","categories":[{"name":"创作","slug":"创作","permalink":"http://maho.me/categories/创作/"}],"tags":[{"name":"python","slug":"python","permalink":"http://maho.me/tags/python/"}]},{"title":"JMeter官方文档2（翻译）","slug":"JMeter官方文档2","date":"2016-05-25T12:50:31.000Z","updated":"2017-11-26T14:20:08.000Z","comments":true,"path":"2016/05/25/JMeter官方文档2/","link":"","permalink":"http://maho.me/2016/05/25/JMeter官方文档2/","excerpt":"英文原版地址：http://jmeter.apache.org/usermanual/get-started.html 开始使用JMeter的最简单方法是首先下载最新的版本并安装它。这个发布版本包含了创建和运行各种测试所需要的文件，包括Web（HTTP/HTTPS）, FTP, JDBC, LDAP, Java, JUnit等等。","text":"英文原版地址：http://jmeter.apache.org/usermanual/get-started.html 开始使用JMeter的最简单方法是首先下载最新的版本并安装它。这个发布版本包含了创建和运行各种测试所需要的文件，包括Web（HTTP/HTTPS）, FTP, JDBC, LDAP, Java, JUnit等等。 如果你想做JDBC的性能测试，那么你需要从你的供应商获取JDBC驱动。JMeter不提供任何JDBC的驱动。 JMeter提供JMS的API的jar包，但是不提供JMS客户端工具。如果你想运行JMS测试，那么请到JMS官网下载需要的jar包。 接下来，我们启动JMeter并经过用户手册的构建测试计划的部分来熟悉JMeter的基本操作（比如添加或删除元素）。 最后，经过关于如何建立特殊类型的测试计划部分。比如，你对一个Web应用的测试感兴趣，那么请查看构建测试计划的部分。其他测试计划部分： 进阶Web测试 JDBC FTP JMS点对点 JMS Topic LDAP LDAP扩展 WebServices（SOAP）一旦你熟悉构建和运行JMeter的测试计划，你可以看看各种各样的配置元素（定时器，监听器，断言等）来为你的测试计划添加更多的控制。 2.1 配置要求JMeter要求你的计算机环境满足一些最低需求。 2.1.1 Java版本 JMeter要求JVM7或更高 2.1.2操作系统JMeter是一个100%的Java应用程序，所以需要在一个具有Java环境的操作系统中运行。 操作系统要求在JMeter Wiki的这一页里。 即使你的操作系统没有在Wiki页里显示，JMeter通常也可以运行，只要JVM符合要求。 2.2 可选项如果你在做JMeter开发，那么你需要下面涉及的一种或多种可选包。 2.2.1 Java编译器如果你想构建JMeter源或开发JMeter插件，那么需要JDK7以上的版本。 2.2.2 SAX XML解析器JMeter随Apache的Xerces XML Parser发布。你有告诉JMeter使用一种不同的XML分析器的选项。要做到这一点，包括在JMeter的classpath中第三方解析器的类，并更新带全类名解析器工具的jmeter.properties文件。 2.2.3 Email支持JMeter拥有丰富的电子邮件功能。它能发送基于测试报告的邮件，并拥有POP3(S)/IMAP(S)的采样器。它也拥有SMTP(S)采样器。 2.2.4 SSL加密要测试一个使用SSL加密（HTTPS）的Web服务器，JMeter要求提供SSL实现工具，比如使用Sun Java 1.4等情况。如果你的Java版本不支持SSL，那也可以增加一个额外实现工具。在JMeter的classpath包含必须加密包。也可以更新system.properties来注册SSL提供者。 JMeter的默认HTTP协议级别是TLS。编辑JMeter配置文件jmeter.properties或user.properties里的https.default.protocol可以改变他们。 JMeter的HTTP采样器接受所有证书配置，无论是否能够信任并无视有效期等。这样实现来测试服务器的最大灵活性。 如果服务器要求一个客户端证书，它也能被提供。 对于那些对证书有严格控制的服务器也有SSL管理器。 JMeter代理服务器支持录制HTTPS(SSL) 该SMTP采样器可以选择使用本地信任存储区或信任的所有证书。 2.2.5 JDBC驱动如果你想做JDBC测试，你需要将您的数据库供应商的JDBC驱动添加到classpath。确保文件是jar格式，而不是zip格式。 2.2.6 JMS客户端现在JMeter包含来自Apache Geronimo的JMS的API，所以你仅需要添加来自JMS提供者的JMS客户端实现工具jar包。请参考其文档以了解详情。在JMeter Wiki上也许也有一些有用的信息。 2.2.7 ActiveMQ JMS库你需要向你的classpath添加名字为activemq-all-X.X.X.jar的jar包，例如通过将他们保存在lib/目录里。 其他需要的jar包（比如commons-logging）已经包含在JMeter里。 查看ActiveMQ 初始化配置页面以了解详情。 查看JMeter Classpath部分，了解安装额外jar包的详情 2.3 安装我们推荐用户使用最新版本。 要安装一个发行版本，简单地向你想安装JMeter的目录里解压zip/tar文件。如果你正确安装来JRE/JDK并配置好了JAVA_HOME环境变量，那就没啥再需要做的了。 如果目录路径里包含空格则可能会出现问题（尤其是附带client-server模式） 安装目录结构看起来应该像这个样子（X.Y是版本数字）： apache-jmeter-X.Y apache-jmeter-X.Y/bin apache-jmeter-X.Y/docs apache-jmeter-X.Y/extras apache-jmeter-X.Y/lib/ apache-jmeter-X.Y/lib/ext apache-jmeter-X.Y/lib/junit apache-jmeter-X.Y/licenses apache-jmeter-X.Y/printable_docs 你可以重命名父目录（比如apache-jmeter-X.Y），但一定不要更改子目录的名字。 2.4 运行JMeter要运行JMeter，请执行jmeter.bat（Windows环境下）或jmeter（Unix环境下）文件。这些文件能在bin目录下找到。等一小会儿，JMeter的图形界面就会出现。 bin目录里有一些你也许觉得有用的其他脚本。 Windows脚本文件（.CMD文件要求Windows 2000或以后的版本）： jmeter.bat 运行JMeter（默认为图形界面模式） jmeterw.cmd 运行不带Windows外壳程序控制台的JMeter（默认为图形界面模式） jmeter-n.cmd 使用一个JMX文件并运行一个无图形界面的测试 jmeter-n-r.cmd 使用一个JMX文件并远程运行一个无图形界面的测试 jmeter-t.cmd 使用一个JMX文件并在GUI模式载入它 jmeter-server.cmd 启动JMeter服务器模式 mirror-server.cmd 运行非GUI模式的JMeter镜像服务器 shutdown.cmd 运行shutdown客户端正常停止非GUI实例 stoptest.cmd 运行shutdown客户端突然停止非GUI实例 特殊名字LAST可以用在jmeter-n.cmd,jmeter-t.cmd和jmeter-n-r.cmd上，那就意味着测试计划会在最后执行 环境变量JVM_ARGS可用于重写JVM设置在jmeter.bat脚本里。例如： set JVM_ARGS=”-Xms1024m -Xmx1024m -Dpropname=propvalue” jmeter -t test.jmx … Un*x脚本文件（可在大多数Linux/Unix系统运行）： jmeter 运行JMeter（默认为图形界面模式）。定义的一些JVM设置可能不适合所有JVM运行。 jmeter-server 启动JMeter服务器模式（调用带适当参数的JMeter脚本）。 jmeter.sh 非常基本的JMeter脚本（你可能需要调整JVM设置，如内存设置）。 mirror-server.sh 运行非GUI模式的JMeter镜像服务器 shutdown.sh 运行shutdown客户端正常停止非GUI实例 stoptest.sh 运行shutdown客户端突然停止非GUI实例 如果一些JVM设置不被你所使用的JVM支持，那可能需要编辑JMeter的Shell脚本。环境变量JVM_ARGS可悲重写或设置其他JVM设置，比如： JVM_ARGS=”-Xms1024m -Xmx1024m” jmeter -t test.jmx[etc.] 将重写脚本里的HEAP设置。 2.4.1 JMeter的Classpath JMeter能够自动在下列目录中找到来自jar包中的类： JMETER_HOME/lib 用于公用jar包 JMETER_HOME/lib/ext 用于JMeter组件和插件 如果你已经开发过新的JMeter组件，那你应该把他们做成jar包并复制到JMeter的lib/ext目录下。JMeter将自动找到该目录下任意jar包里的JMeter组件。不要把公用jar包或插件使用的依赖jar包放到lib/ext目录下；它仅用于JMeter的组件和插件。 如果你不想把JMeter插件jar包放到lib/ext目录下，那么可以对jmeter.properties里的search_paths进行设置。 公用和依赖jar包（库等）可以放在lib目录下。 如果你不想把这些jar包放到lib目录下，那么可以对jmeter.properties里的user.classpath或plugin_dependency_paths进行设置。请参阅以下差异的说明。 其他jar包（例如JDBC，JMS实现工具以及其他被JMeter代码所支持的库）应该放到lib目录下，而不是lib/ext目录下或增加到user.classpath。 JMeter只能识别.jar文件，而不会识别.zip文件 你也可以在$JAVA_HOME/jre/lib/ext里安装公用jar文件，或者你可以对jmeter.properties里的user.classpath进行设置。 请注意，设置CLASSPATH环境变量将不会有任何效果。这是因为JMeter随“java -jar”启动，并且当-jar被使用时，java命令会悄悄地忽视CLASSPATH变量和-classpath/-cp选项。 这发生在所有的Java程序而不仅仅是Jmeter 2.4.2 从模板创建测试计划你能够从已经存在的模板中创建一个新的测试计划。 要做到这一点，单击菜单 文件→Templates… 或 Templates图标：弹出对话框，你可以在这个列表里选择一个模板：对于每个模板都有个文档，它会说明测试计划从模板中被创建后要做什么。 2.4.3 在JMeter中使用代理如果你正在测试具有防火墙/代理的服务器，你需要为JMeter提供防火墙/代理服务器的主机名和端口号。要做到这一点，在命令行执行jmeter[.bat]文件并附带以下命令： -H [代理服务器主机名或IP地址] -P [代理服务器端口] -N [非代理主机]（例如*.apache.org|localhost） -u [代理身份验证的用户名（如果需要的话）] -a [代理身份验证的密码（如果需要的话）] 例子： jmeter -H my.proxy.server -P 8000 -u username -a password -N localhost 你也可以使用–proxyHost，–proxyPort，–username和–password作为参数名称。 提供的命令行参数对系统其他用户可见 如果提供了代理主机和端口，那么JMeter会设置以下系统属性： http.proxyHost http.proxyPort https.proxyHost https.proxyPort 如果提供了非代理主机列表，那么JMeter会设置以下系统属性： http.nonPorxyHosts https.nonProxyHosts 所以如果你不想同时设置http和https代理，你可以在system.properties设置相关属性而不是使用命令行参数。 代理设置也可以在一个测试计划里定义，使用HTTP默认请求配置或HTTP请求采样器元素。 JMeter也有它自己的内置代理服务器——HTTP(S)测试脚本录制器。这只能用于录制HTTP或HTTPS浏览器会话。当JMeter自己产生HTTP或HTTPS请求被使用，它不能与上述的代理设置相混淆 2.4.4 非GUI模式（命令行模式）对于非交互测试，你可以运行不带图形界面的JMeter。要做到这一点，使用以下命令选项： -n 这个专门用来运行不带图形界面的JMeter -t [包含测试计划的JMX文件的文件名] -l [记录采样器结果的JTL文件的文件名] -j [运行JMeter日志文件的文件名] -r 在设置过JMeter属性“remote_hosts”的服务器里运行测试 -R [远程服务器列表] 在特定的远程服务器里运行测试 -g [CSV文件路径] 仅生成报告仪表板 -e 负载测试过后生成报告仪表板 -o 负载测试过后生成报告仪表板的输出文件夹 文件夹必须不存在或者为空 该脚本还可以指定可选的防火墙/代理服务信息： -H [代理服务器主机名或IP地址] -P [代理服务器端口] 例子： jmeter -n -t my_test.jmx -l log.jtl -H my.proxy.server -P 8000 如果jmeterengine.stopfail.system.exit属性被设置为真（默认为假），那么JMeter将调用System.exit(1)如果它不能停止所有线程。 通常那不是必须的。 2.4.5 服务器模式对于分布式测试，在远程节点运行JMeter服务器模式，并且从GUI控制服务器。你也可以使用非GUI模式来运行远程测试。要启动服务器，在每个服务器主机运行jmeter-server[.bat]。 该脚本还可以指定可选的防火墙/代理服务信息： -H [代理服务器主机名或IP地址] -P [代理服务器端口] 例子： jmeter-server -H my.proxy.server -P 8000 如果你想让服务器在单个测试已经运行后退出，那么请设置JMeter属性server.exitaftertest=true。 要在客户端里运行非GUI模式测试，使用下列命令： jmeter -n -t testplan.jmx -r [-Gprop=val] [-Gglobal.properties] [-X] 其中： -G 被用来定义服务器里JMeter属性 -X 意味着在测试结束时退出服务器 -Rserver1,server2 可用来代替-r提供服务器启动的列表。重写remote_hosts，但不定义属性。 如果jmeterengine.remote.system.exit属性被设置为真（默认为假），那么在测试结束时停止RMI后JMeter将调用System.exit(0)。通常那不是必须的。 2.4.6 通过命令行重写属性Java系统属性，JMeter属性和日志属性可以直接在命令行下重写（而不是修改jmeter.properties）。要做到这一点，请使用下列选项： -D[prop_name]=[value]定义Java系统属性值。-J[prop_name]=[value]定义本地JMeter属性。-G[prop_name]=[value]定义要发送给所有远程服务器的JMeter属性。-G[propertyfile]定义包含发送给所有远程服务器的JMeter属性的文件。-L[category]=[priority]重写日志设置，设置一个特定级别的优先级。-L标记也可以不带目录名称用于设置根目录日志级别。 例子： jmeter -Duser.dir=/home/mstover/jmeter_stuff -Jremote_hosts=127.0.0.1 -Ljmeter.engine=DEBUG jmeter -LDEBUG 命令行属性在启动初期处理，但那会在日志系统建立后处理。所以尝试使用-J标记来更新log_level或log_file属性将不会有作用。 2.4.7 日志和错误信息JMeter一般不会使用弹出式对话框来显示错误，因为这将与运行测试产生冲突。他也没有报告任何变量或函数的拼写错误。查看函数和变量部分获取更多信息。如果JMeter在测试时检测到错误，那么消息会写在日志文件里。日志文件名在jmter.properties文件里定义（或使用-j选项，见下文）。默认文件名为jmeter.log，并且该文件会在已经启动的JMeter下的目录里找到。 菜单 选项→Log Viewer 显示在JMeter主窗口底部窗格的日志文件。 在GUI模式下，错误/致命错误的数量会记录在日志文件里并显示着右上角。命令行选项-j jmeterlogfile 允许在初始属性文件被读取后或在进一步属性处理之前处理。因此允许jmeter.log的默认值被重写。这需要一个测试计划名称作为参数（例如jmeter-n.cmd），已经使用测试计划名称更新日志文件定义，例如对于Test27.jmx的日志文件就命名为Test27.log。 当JMeter在Windows下运行，那么文件可能只会显示为jmeter除非你已经设置显示文件扩展名[反正你需要做的就是，使其更容易检测到装成文本文件的病毒或其他糟糕的东西…] 还有记录错误，jmeter.log文件记录了测试运行的一些信息。例如： 10/17/2003 12:19:20 PM INFO - jmeter.JMeter: Version 1.9.20031002 10/17/2003 12:19:45 PM INFO - jmeter.gui.action.Load: Loading file: c:mytestfilesBSH.jmx 10/17/2003 12:19:52 PM INFO - jmeter.engine.StandardJMeterEngine: Running the test! 10/17/2003 12:19:52 PM INFO - jmeter.engine.StandardJMeterEngine: Starting 1 threads for group BSH. Ramp up = 1. 10/17/2003 12:19:52 PM INFO - jmeter.engine.StandardJMeterEngine: Continue on error 10/17/2003 12:19:52 PM INFO - jmeter.threads.JMeterThread: Thread BSH1-1 started 10/17/2003 12:19:52 PM INFO - jmeter.threads.JMeterThread: Thread BSH1-1 is done 10/17/2003 12:19:52 PM INFO - jmeter.engine.StandardJMeterEngine: Test has ended 日志文件对缺点错误原因很有帮助，而且JMeter不会中断测试来显示错误对话。 2.4.8 命令行选项完整列表调用jmeter -?命令会显示所有命令行选项列表。 2.4.9 非GUI的关闭在之前的2.5.1版本，当非GUI测试完成时JMeter调用System.exit()命令结束。这对直接调用JMeter的应用会造成问题，所以完成一个通常测试后JMeter不再调用System.exit()。[某些致命错误仍可能调用System.exit()]JMeter会推出所有它启动的非守护线程，但一些非守护线程可能会依然存在；这将阻止JVM的退出，为检测这种情况，JMeter在它退出前会启动一个新的守护线程。这个守护县城会等待一小会儿；如果它从等待返回，那么就能清楚地了解JVM一直未退出，并且线程会显示信息来说明原因。 2.5 配置JMeter如果你想修改JMeter的一些属性，那么你需要修改/bin目录下的user.properties或创建你自己的jmeter.properties副本并在命令行下指定它。 说明：你可以在具有默认值的user.properties下定义其他的JMeter属性。这个文件将被自动读取如果它在JMeter的bin目录下被找到。同样，system.properties被用来更新系统属性","categories":[{"name":"创作","slug":"创作","permalink":"http://maho.me/categories/创作/"}],"tags":[{"name":"JMeter","slug":"JMeter","permalink":"http://maho.me/tags/JMeter/"}]},{"title":"JMeter官方文档（翻译）","slug":"JMeter官方文档","date":"2016-05-24T05:09:52.000Z","updated":"2017-11-26T14:20:00.000Z","comments":true,"path":"2016/05/24/JMeter官方文档/","link":"","permalink":"http://maho.me/2016/05/24/JMeter官方文档/","excerpt":"英文原版地址：http://jmeter.apache.org/ Apache JMeterApache JMeter程序是一款开源软件，100%纯Java程序，它用于负载测试、功能行为测试和性能测试。它最初用于Web应用程序的测试，但至今它已经得到扩展并用于其他方面的测试。","text":"英文原版地址：http://jmeter.apache.org/ Apache JMeterApache JMeter程序是一款开源软件，100%纯Java程序，它用于负载测试、功能行为测试和性能测试。它最初用于Web应用程序的测试，但至今它已经得到扩展并用于其他方面的测试。 我可以用它来做什么？Apache JMeter可用来测试静态或动态资源（Web服务（SOAP/REST），Web动态语言PHP，Java，ASP.NET文件等等，Java对象，数据库和查询，FTP服务器或其他）的性能。它能够在服务器，服务器群或对象上模拟出很强的负载，测试他们的强度或来分析在不同负载类型下他们的总体性能。你可以用它来制作一个图形化的性能分析报告或测试你的服务器/脚本/对象在强并发负载下的表现。 它可以做什么？Apache JMeter的特点包括： 能够对多种不同的服务器/协议类型进行负载和性能测试： Web - HTTP, HTTPS SOAP / REST FTP 由 JDBC连接的数据库 LDAP 通过Java消息服务（Java Message Service）的面向消息中间件（MOM） 邮箱 - SMTP(S), POP3(S) 和 IMAP(S) 本地命令或Shell脚本 TCP 完全的可移植性和100%的Java纯度。完整的多线程框架允许通过多个线程进行并发采样并通过不同功能的单独线程组进行同步采样。精心的GUI界面设计让测试计划的建立和排错速度变得更快。高速缓存和测试结果的离线分析/重放。高度可扩展的核心： 可插拔的采样器让测试功能不受到约束。 多种负载统计可以跟可插拔的计时器一起选择使用。 数据分析和可视化插件允许我们高度扩展并个性化。 具有可为测试提供一种动态输入或提供数据操作的功能。 脚本化采样器 (BeanShell, 兼容BSF的语言和兼容JSR223的语言) JMeter不是浏览器JMeter不是浏览器。在Web服务和远程服务方面，JMeter看起来像个浏览器（甚至是多个浏览器）；然而JMeter不会执行浏览器所支持的所有行为。尤其是JMeter不会去执行HTML页面里的JavaScript脚本。它也不会像浏览器那样呈现HTML页面（它可以查看作为HTML的响应等等，但不会在任何样本里包含时间控制，并且一个线程里每次只有一个样本被查看）。","categories":[{"name":"创作","slug":"创作","permalink":"http://maho.me/categories/创作/"}],"tags":[{"name":"JMeter","slug":"JMeter","permalink":"http://maho.me/tags/JMeter/"}]}]}